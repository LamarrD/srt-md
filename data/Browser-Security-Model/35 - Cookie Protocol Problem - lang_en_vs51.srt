1
00:00:00,260 --> 00:00:03,650
Now let's discuss some security
problems with cookies.

2
00:00:03,650 --> 00:00:07,950
First of all, the server is blind and
what do we do mean by that?

3
00:00:07,950 --> 00:00:10,630
It does not see all
the cookie attributes.

4
00:00:10,630 --> 00:00:15,040
For example, whether the cookie
attributes include secure,

5
00:00:15,040 --> 00:00:20,750
which means Https only, or
has the attribute HttpOnly.

6
00:00:20,750 --> 00:00:25,760
When a server receives a cookie, it does
not see which domain sent the cookie.

7
00:00:25,760 --> 00:00:32,009
Actually, all the server sees is some
selected attributes sent by the browser.

8
00:00:32,009 --> 00:00:35,030
This problem can be
exploited by attackers.

9
00:00:35,030 --> 00:00:39,180
For example,
say Alice wants to submit her homework.

10
00:00:39,180 --> 00:00:41,777
She logs in login.site.com and

11
00:00:41,777 --> 00:00:46,800
login.site.com sets the session-id
cookie for site.com.

12
00:00:46,800 --> 00:00:52,400
And then, Alice decides to take a break
and unknowingly visits a malicious site.

13
00:00:52,400 --> 00:00:54,620
For example,
because of a phishing attack.

14
00:00:54,620 --> 00:00:59,508
And evil.site.com can override
the .site.com session-id cookie

15
00:00:59,508 --> 00:01:02,420
with a session-id of user Badguy.

16
00:01:02,420 --> 00:01:06,920
Then Alice returns to the homework
site ready to turn in her homework.

17
00:01:06,920 --> 00:01:11,375
Of course.site.com thinks that it
is talking to the badguy because

18
00:01:11,375 --> 00:01:14,790
the session-id has been overwritten.

19
00:01:14,790 --> 00:01:19,710
The problem is that course.site.com
expects session-id cookie

20
00:01:19,710 --> 00:01:22,330
that was set by login.site.com.

21
00:01:22,330 --> 00:01:26,430
It cannot tell that the session-id
cookie was overwritten.

22
00:01:26,430 --> 00:01:30,140
Here's another example of
cookie security problems.

23
00:01:30,140 --> 00:01:35,880
Suppose Alice logs in
https://accounts.google.com,

24
00:01:35,880 --> 00:01:39,490
meaning that she logs in
into her Google account.

25
00:01:39,490 --> 00:01:42,230
And accounts.google.com
will set the cookie.

26
00:01:42,230 --> 00:01:45,570
In particular,
it also says that this cookie is Secure,

27
00:01:45,570 --> 00:01:48,430
meaning that it should be used for
HTTPS.

28
00:01:49,490 --> 00:01:55,115
Now suppose that due to some phishing
attack, Alice visits the create text

29
00:01:55,115 --> 00:02:01,040
site, http://www.google.com and

30
00:02:01,040 --> 00:02:05,200
because this is a clear text protocol,
a network attacker

31
00:02:05,200 --> 00:02:09,070
can intercept the traffic and
override the cookie attributes.

32
00:02:09,070 --> 00:02:15,500
And the result is that this overwritten
cookie can be used for a HTTPS session.

33
00:02:15,500 --> 00:02:21,680
As we can see, a network attacker can
intercept and rewrite HTTPS cookies,

34
00:02:21,680 --> 00:02:26,750
which means that even a HTTPS cookie,
its values cannot be trusted.

35
00:02:26,750 --> 00:02:29,690
We have not talked about
the path of a cookie.

36
00:02:29,690 --> 00:02:33,756
The path separation is done only for
efficiency, not for security.

37
00:02:33,756 --> 00:02:38,442
For example, x.com/A would tell
that if a server only needs

38
00:02:38,442 --> 00:02:43,295
to access this path,
that only this cookie's needed.

39
00:02:43,295 --> 00:02:48,520
Recall that the scope of a cookie
is determined by domain and path.

40
00:02:48,520 --> 00:02:54,030
Which means that x.com/A does not
see cookies of x.com/B because

41
00:02:54,030 --> 00:02:55,700
they are different paths.

42
00:02:55,700 --> 00:02:58,080
That is, they're in different scopes.

43
00:02:58,080 --> 00:03:01,060
However, this is not
a strong security measure.

44
00:03:01,060 --> 00:03:07,440
Because x.com/A still has access to the
DOM, meaning the document object model

45
00:03:07,440 --> 00:03:13,015
of x.com/B, because they are the same
origin as far as DOM is concerned.

46
00:03:13,015 --> 00:03:18,190
For example, x.com/A can use
the following to print out or

47
00:03:18,190 --> 00:03:21,550
read the cookie of x.com/B.

48
00:03:21,550 --> 00:03:26,430
Another security problem of cookies
is that cookies have no integrity.

49
00:03:26,430 --> 00:03:30,750
For example, a user can change or
even delete cookie values.

50
00:03:30,750 --> 00:03:35,170
For example, there are tools
that a user can use to change or

51
00:03:35,170 --> 00:03:36,820
delete cookie values.

52
00:03:36,820 --> 00:03:41,340
For example, a user can change
the shopping cart cookie and

53
00:03:41,340 --> 00:03:45,090
change the total dollar
amount from $150 to $15.

54
00:03:45,090 --> 00:03:51,340
Similarly, if the website had used
a hidden field in the webpage to record

55
00:03:51,340 --> 00:03:55,960
the value, a user can still edit the
source of the page and change the value.
