1
00:00:00,024 --> 00:00:04,212
Here's an example of a transparent
malware analyzer that they built at

2
00:00:04,212 --> 00:00:06,280
Georgia Tech called Ether.

3
00:00:06,280 --> 00:00:08,560
By the way, it is open source.

4
00:00:08,560 --> 00:00:13,630
Let's briefly describe how Ether
fulfills the transparency requirements.

5
00:00:13,630 --> 00:00:18,050
Ether is built using Intel VT for
hardware virtualization.

6
00:00:18,050 --> 00:00:21,850
The Hypervisor has higher
privilege over the OS kernel.

7
00:00:21,850 --> 00:00:25,830
Therefore, Ether has higher
privilege than malware.

8
00:00:25,830 --> 00:00:30,430
Some of these hardware supported traps
further guarantee this higher privilege.

9
00:00:30,430 --> 00:00:34,520
Ether runs outside of the virtual
machine where the malware runs.

10
00:00:34,520 --> 00:00:39,380
Therefore, there's minimal side-effects
that malware can directly observe.

11
00:00:39,380 --> 00:00:42,410
Ether uses hardware
based authorization and

12
00:00:42,410 --> 00:00:47,490
therefore, the instruction execution
semantics are the same as on hardware.

13
00:00:47,490 --> 00:00:49,215
For exception handling, again,

14
00:00:49,215 --> 00:00:54,740
hardware-based virtualization allows
the same semantics as on hardware.

15
00:00:54,740 --> 00:00:56,400
For on-host time measurement,

16
00:00:56,400 --> 00:01:00,840
the operations comes down to the use
of read time-stamp counter instruction.

17
00:01:00,840 --> 00:01:04,890
This is a privileged instruction and
therefore, the Hypervisor and

18
00:01:04,890 --> 00:01:08,400
ether can control the return
results to the malware

19
00:01:08,400 --> 00:01:11,050
when the malware tries to
get a measurement of time.

20
00:01:12,050 --> 00:01:13,790
Here's the architecture of Ether.

21
00:01:13,790 --> 00:01:17,100
Ether has a component within Xen,
the Hypervisor.

22
00:01:17,100 --> 00:01:19,760
And the rest of Ether is in Dom0.

23
00:01:19,760 --> 00:01:22,320
A separate, privileged virtual machine.

24
00:01:22,320 --> 00:01:27,160
The malware runs on a separate user
level virtual machine called DomU.

25
00:01:27,160 --> 00:01:31,970
Ether provides a fine grained insertion
by insertion examination of malware and

26
00:01:31,970 --> 00:01:36,330
also a coarse grained system
call by system call examination.

27
00:01:36,330 --> 00:01:39,740
We created two tools to evaluate Ether.

28
00:01:39,740 --> 00:01:41,630
The fist is EtherUnpack.

29
00:01:41,630 --> 00:01:45,250
It extracts hidden code
from obfuscated malware.

30
00:01:45,250 --> 00:01:47,280
The second one is EtherTrace,

31
00:01:47,280 --> 00:01:51,690
it records system calls
executed by obfuscated malware.

32
00:01:51,690 --> 00:01:55,300
We then compare both of these
tools to the current academic and

33
00:01:55,300 --> 00:01:56,720
industry approaches.

34
00:01:56,720 --> 00:01:59,340
For EtherUnpack, we compared how well

35
00:01:59,340 --> 00:02:03,540
current tools extract hidden code
by obfuscating a test binary and

36
00:02:03,540 --> 00:02:06,580
looking for
a known string in the extracted code.

37
00:02:06,580 --> 00:02:11,250
For EtherTrace, we obfuscated a test
binary which executes a set of known

38
00:02:11,250 --> 00:02:15,862
operations and then observe if
they were logged by the tool.

39
00:02:15,862 --> 00:02:17,670
For EtherTrace again,

40
00:02:17,670 --> 00:02:22,770
the results show that Ether has much
better transparency than other tools.

41
00:02:22,770 --> 00:02:28,860
Now Ether has limitations and it is only
one of the tools in the continued battle

42
00:02:28,860 --> 00:02:35,370
between defenders or malware analysis
and the attackers or obfuscations.

43
00:02:35,370 --> 00:02:37,460
Let's take a look at this model.

44
00:02:37,460 --> 00:02:41,070
Here, for each major categories
of analysis approaches,

45
00:02:41,070 --> 00:02:45,890
the attackers come up with obfuscation
techniques to defeat such analysis.

46
00:02:45,890 --> 00:02:50,170
For example, for static analysis,
including scanning the binaries

47
00:02:50,170 --> 00:02:54,480
looking for fixed strings,
the attacker can obfuscate the malware.

48
00:02:54,480 --> 00:02:56,400
For example, as a result of packing,

49
00:02:56,400 --> 00:03:00,580
the binary contents will look different
from one instance to the next.

50
00:03:00,580 --> 00:03:04,640
We also use dynamic analysis,
meaning running the malware.

51
00:03:04,640 --> 00:03:08,620
The corresponding obfuscation
technique is trigger-based behavior.

52
00:03:08,620 --> 00:03:12,250
For example, the malware will
not run until the time is right.

53
00:03:12,250 --> 00:03:16,260
Or it detects the fact that it's been
analyzed in an emulation environment

54
00:03:16,260 --> 00:03:17,610
and then stopped.

55
00:03:17,610 --> 00:03:21,620
And since simple dynamic
analysis now becomes inadequate,

56
00:03:21,620 --> 00:03:26,900
researchers have come up with various
ways to force execution of this malware.

57
00:03:26,900 --> 00:03:31,100
And of course, this battle between
analysis and obfuscation will continue.
