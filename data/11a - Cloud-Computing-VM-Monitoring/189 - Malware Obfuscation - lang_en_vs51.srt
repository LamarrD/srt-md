1
00:00:00,000 --> 00:00:04,406
Now let's take a closer look at one
of the most widely used obfuscation

2
00:00:04,406 --> 00:00:06,010
techniques, packing.

3
00:00:06,010 --> 00:00:10,350
Given the original malware program,
the packing tool would transform it, so

4
00:00:10,350 --> 00:00:12,850
that the transformed code looks random.

5
00:00:12,850 --> 00:00:15,910
Because it is encrypted,
we randomly generate a key.

6
00:00:15,910 --> 00:00:20,140
And this happens each time the packing
program is run on a malware program.

7
00:00:20,140 --> 00:00:21,150
That is even for

8
00:00:21,150 --> 00:00:25,630
the same malware program, each
packed instance will look different.

9
00:00:25,630 --> 00:00:26,560
And therefore,

10
00:00:26,560 --> 00:00:30,870
a signature based approach is not
effective in detecting the malware.

11
00:00:30,870 --> 00:00:33,910
Furthermore, the transformed
machine code looks like data.

12
00:00:33,910 --> 00:00:37,530
Therefore, a network IDS that looks for
executables and

13
00:00:37,530 --> 00:00:39,520
email attachment will miss it.

14
00:00:39,520 --> 00:00:42,970
If the anti virus company
obtains the zero day malware,

15
00:00:42,970 --> 00:00:44,750
even though it is obfuscated.

16
00:00:44,750 --> 00:00:48,600
Eventually, the researchers can
de-obfuscate the malware and

17
00:00:48,600 --> 00:00:50,230
discover its behaviors.

18
00:00:50,230 --> 00:00:52,180
But such analysis takes time and

19
00:00:52,180 --> 00:00:54,800
the attacker can make
such analysis fruitless.

20
00:00:54,800 --> 00:00:58,600
Even anti virus company
analyzes a zero day malware

21
00:00:58,600 --> 00:01:00,440
even though it is obfuscated.

22
00:01:00,440 --> 00:01:04,620
Eventually, the researchers can
de-obfuscate the malware and

23
00:01:04,620 --> 00:01:06,300
discover its behaviors.

24
00:01:06,300 --> 00:01:08,250
But such analysis takes time.

25
00:01:08,250 --> 00:01:11,820
And the attacker can make
such analysis fruitless.

26
00:01:11,820 --> 00:01:16,440
In particular, the attacker's server
can continuously send an updated or

27
00:01:16,440 --> 00:01:17,770
new malware.

28
00:01:17,770 --> 00:01:21,570
That is obfuscated of course,
to the compromised computers.

29
00:01:21,570 --> 00:01:23,820
Then in effect, the defenders or

30
00:01:23,820 --> 00:01:28,240
researchers have to deal with zero
day on new malware constantly.

31
00:01:28,240 --> 00:01:31,940
That is by the time they have
successfully analyzed a malware,

32
00:01:31,940 --> 00:01:33,610
it has become obsolete.

33
00:01:33,610 --> 00:01:37,520
A real example of this server
polymorphism is Waledac.

34
00:01:37,520 --> 00:01:41,400
This particular version of
the malware postcard.exe was

35
00:01:42,730 --> 00:01:46,820
released on December 30,
2008 and by February 25, 2009,

36
00:01:46,820 --> 00:01:51,130
the majority of the antivirus
software can detect it.

37
00:01:51,130 --> 00:01:56,540
But a new version of the malware
disc.exe was detected by only

38
00:01:56,540 --> 00:02:01,840
a very small percentage of the antivirus
software on the date it was released.

39
00:02:01,840 --> 00:02:06,020
Here's an example showing the challenges
the anti-virus industry is facing.

40
00:02:06,020 --> 00:02:10,369
The researchers surveyed McAfee
anti-virus software using

41
00:02:10,369 --> 00:02:14,464
20,000 malware samples
collected over six months.

42
00:02:14,464 --> 00:02:18,385
53% of the malware samples were
detected on the day of release.

43
00:02:18,385 --> 00:02:21,980
32% of the malware samples
were detected with a delay.

44
00:02:21,980 --> 00:02:25,160
And the delay was on average 54 days.

45
00:02:25,160 --> 00:02:29,270
And 15% of the malware samples were
not detected even six months later.
