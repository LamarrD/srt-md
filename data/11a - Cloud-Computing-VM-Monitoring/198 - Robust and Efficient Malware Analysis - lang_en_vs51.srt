1
00:00:00,330 --> 00:00:04,680
Now let's discuss how to build a robust
and efficient malware analysis system.

2
00:00:04,680 --> 00:00:09,360
By robust, we mean it is transparent and
is not easily detected and

3
00:00:09,360 --> 00:00:11,070
evaded by malware.

4
00:00:11,070 --> 00:00:14,390
By efficient,
we mean it is automated and fast.

5
00:00:14,390 --> 00:00:16,480
We focus on host-based analysis.

6
00:00:16,480 --> 00:00:20,800
That is, learning malware on
a machine and analyze its behaviors.

7
00:00:20,800 --> 00:00:24,340
As a recap, the malware will
tried to detect the presence or

8
00:00:24,340 --> 00:00:26,425
the side effect of the analyzer.

9
00:00:26,425 --> 00:00:31,320
And our goal is to achieve the same
result of malware execution,

10
00:00:31,320 --> 00:00:34,480
regardless of the presence
of the analyzer.

11
00:00:34,480 --> 00:00:37,510
So let's analyze the transparency
requirements again and

12
00:00:37,510 --> 00:00:39,750
see how they can be fulfilled.

13
00:00:39,750 --> 00:00:44,073
For higher privilege, let's put analyzer
in hardware or a virtual machine.

14
00:00:44,073 --> 00:00:48,800
For the requirement of no non-privileged
side-effects, we need to make sure that

15
00:00:48,800 --> 00:00:52,630
no side effects can be detected
by non-privileged instructions.

16
00:00:52,630 --> 00:00:56,470
That is those are the malware
can execute and get results.

17
00:00:56,470 --> 00:01:00,760
Of course the analyzer will
inevitable introduce side-effects.

18
00:01:00,760 --> 00:01:04,694
But if the malware has to use privileged
instructions to learn about these

19
00:01:04,694 --> 00:01:09,204
side-effects, these instructions have to
be executed at a higher privilege level

20
00:01:09,204 --> 00:01:13,510
than the malware, and then the answers
are provided back to the malware.

21
00:01:13,510 --> 00:01:16,700
The analyzer,
since it is at a high privilege level,

22
00:01:16,700 --> 00:01:19,180
can lie the answers back to the malware.

23
00:01:19,180 --> 00:01:23,160
For the requirement of identical basic
instruction execution semantics,

24
00:01:23,160 --> 00:01:25,350
we need to use the real hardware.

25
00:01:25,350 --> 00:01:28,050
Likewise, we need to make sure
that exception handling will

26
00:01:28,050 --> 00:01:30,860
be the same as if on real hardware.

27
00:01:30,860 --> 00:01:35,362
For timing, we need to know
the timing of each instruction I/O,

28
00:01:35,362 --> 00:01:38,070
and exception handling
on the real hardware.

29
00:01:38,070 --> 00:01:42,480
And make sure that the malware can only
use privileged instructions to get

30
00:01:42,480 --> 00:01:47,870
timing measurements on the host so that
the analyzer can lie the answers back.

31
00:01:47,870 --> 00:01:52,720
Just to recap, in order to achieve
transparency, a malware analyzer needs

32
00:01:52,720 --> 00:01:57,270
to be on a higher privilege,
has no non-privileged side effects,

33
00:01:57,270 --> 00:02:00,840
has identical basic instruction
execution semantics, has the same

34
00:02:00,840 --> 00:02:04,150
transparent exception handling,
and identical measurement of time.
