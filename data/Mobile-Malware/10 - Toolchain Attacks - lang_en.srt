1
00:00:00,270 --> 00:00:03,560
Toolchain attack is one
approach to produce malware.

2
00:00:03,560 --> 00:00:05,180
Here's a real example,

3
00:00:05,180 --> 00:00:09,270
an official distribution of Xcode
was compromised with malware.

4
00:00:09,270 --> 00:00:13,000
If a developer used this infected
Xcode library to develop an app,

5
00:00:13,000 --> 00:00:14,620
the app will be infected.

6
00:00:14,620 --> 00:00:18,041
The infected app will then collect
information on devices and

7
00:00:18,041 --> 00:00:19,892
upload the data to a C&C server.

8
00:00:19,892 --> 00:00:22,450
This attack is very potent,
because any app

9
00:00:22,450 --> 00:00:27,092
that is compiled using this Xcode
library now becomes a malicious app.

10
00:00:27,092 --> 00:00:30,050
This XcodeGhost was able
to infect many apps,

11
00:00:30,050 --> 00:00:34,330
including 39 apps published in
the official iOS App Store.

12
00:00:34,330 --> 00:00:38,970
Attacking the App Store review process
is one approach to distribute malware.

13
00:00:38,970 --> 00:00:40,140
Here's an example.

14
00:00:40,140 --> 00:00:45,640
We created the Jekyll app in 2013,
we planted vulnerability in this app,

15
00:00:45,640 --> 00:00:50,140
this vulnerabilities can be exploited
at run time with a particular input.

16
00:00:50,140 --> 00:00:53,767
Once the vulnerabilities is exploited
the Jekyll app can activate new

17
00:00:53,767 --> 00:00:57,283
addition execution path through
Return-Oriented Programming.

18
00:00:57,283 --> 00:01:00,730
And then the app can send SMS,
email, tweet, and so on.

19
00:01:00,730 --> 00:01:04,574
On the other hand the App Store review
process cannot find these malicious

20
00:01:04,574 --> 00:01:09,050
paths, because they cannot review
without a correct input and runtime.

21
00:01:09,050 --> 00:01:12,980
To illustrate, the App Store review
process finds that the control flow of

22
00:01:12,980 --> 00:01:17,375
the app to be safe, that is all
the exclusion paths are acceptable.

23
00:01:17,375 --> 00:01:19,885
On the other hand a run time
minimal ability planted

24
00:01:19,885 --> 00:01:23,215
in the code is exploited,
because of the specific input

25
00:01:23,215 --> 00:01:27,635
that a new control flows that were not
observable in the app view process.

26
00:01:27,635 --> 00:01:31,785
These new control flows allow the Jekyll
app to do evil and make profit.

27
00:01:31,785 --> 00:01:34,500
For example,
it can do a number of activities.

28
00:01:34,500 --> 00:01:39,011
These can be achieved by calling private
APIs that are not directly accessible to

29
00:01:39,011 --> 00:01:40,082
legitimate apps.

30
00:01:40,082 --> 00:01:42,437
But a Jekyll app knows
the memory layout and

31
00:01:42,437 --> 00:01:45,980
hence the addresses of these APIs and
can directly jump to them.

