1
00:00:00,000 --> 00:00:02,930
Here are the high level workflows of ZMap.

2
00:00:02,930 --> 00:00:04,320
To send scanning packets,

3
00:00:04,320 --> 00:00:06,180
ZMap will be configured,

4
00:00:06,180 --> 00:00:09,945
for example, of a random permutation of the address space.

5
00:00:09,945 --> 00:00:12,493
And then the probing packets will be sent to

6
00:00:12,493 --> 00:00:15,510
these addresses according to the random permutation.

7
00:00:15,510 --> 00:00:19,080
Since the majority of fields in a probe packet never change,

8
00:00:19,080 --> 00:00:21,345
ZMap performs all network operations at

9
00:00:21,345 --> 00:00:26,050
the ethernet layer using a raw socket in order to cache values.

10
00:00:26,050 --> 00:00:30,915
This eliminates time lost to kernel operations such as route lookups.

11
00:00:30,915 --> 00:00:37,110
This allows ZMap to send probing packets at a very high speed and validate the responses.

12
00:00:37,110 --> 00:00:42,420
For example, checking the MAC value and the probing results can then be analyzed.

13
00:00:42,420 --> 00:00:45,935
This configuration allows ZMap to send probes at approximately

14
00:00:45,935 --> 00:00:50,780
1.4 million packets per second on a gigabit network.

15
00:00:50,780 --> 00:00:54,120
ZMap is an extensible framework to allow any type of

16
00:00:54,120 --> 00:00:57,735
single packet scan such as a TCP sync scan,

17
00:00:57,735 --> 00:01:02,280
ICMP echo requests or application-specific UDP scan.

18
00:01:02,280 --> 00:01:06,825
The ZMap framework abstracts out details such as configuration,

19
00:01:06,825 --> 00:01:09,450
timing, addressing and validation.

