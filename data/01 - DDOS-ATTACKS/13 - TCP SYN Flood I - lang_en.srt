1
00:00:00,230 --> 00:00:03,940
With that background,
let's discuss how TCP SYN flood or

2
00:00:03,940 --> 00:00:06,270
denial of service attack can work.

3
00:00:06,270 --> 00:00:10,610
Notice that, in TCP handshake,
after the server receives a SYN packet

4
00:00:10,610 --> 00:00:14,800
from the client, it sends a SYN/ACK
packet back to the client, and

5
00:00:14,800 --> 00:00:17,690
then waits for
the ACK packet from the client.

6
00:00:17,690 --> 00:00:19,180
When it received the ACK packet,

7
00:00:19,180 --> 00:00:22,250
it knows that the connection
is established.

8
00:00:22,250 --> 00:00:26,247
Therefore, the server needs to keep in
memory the state of the connection,

9
00:00:26,247 --> 00:00:30,493
meaning that it's waiting for the ACK
packet that matched the SYN/ACK packet,

10
00:00:30,493 --> 00:00:33,760
which matched the initial
SYN packet from client.

11
00:00:33,760 --> 00:00:37,941
So SYN flood exploits the fact that
server needs to keep in memory such

12
00:00:37,941 --> 00:00:39,250
state information.

13
00:00:39,250 --> 00:00:43,671
In particular, the attacker can send
a lot of SYN packets to the server,

14
00:00:43,671 --> 00:00:48,820
and the source IP address is spoofed to
some random target source IP address.

15
00:00:48,820 --> 00:00:52,550
The result is that the SYN/ACK packet
will be sent to the spoofed or

16
00:00:52,550 --> 00:00:53,850
the target address.

17
00:00:53,850 --> 00:00:57,739
Since the source IP address of these
SYN packets are randomly generated and

18
00:00:57,739 --> 00:01:01,340
spoofed, the SYN/ACK
packets may get lost,

19
00:01:01,340 --> 00:01:04,709
meaning that the ACK packet
may never arrive at a server.

20
00:01:04,709 --> 00:01:07,660
The result is that the server's
memory gets filled up,

21
00:01:07,660 --> 00:01:11,800
because the server needs to keep track
of the SYN/ACK packets and wait for

22
00:01:11,800 --> 00:01:13,620
the ACK packet from the clients.

23
00:01:13,620 --> 00:01:16,396
And since many of these
ACK packets do not arrive,

24
00:01:16,396 --> 00:01:19,950
the server is holding in
memory this state information.

25
00:01:19,950 --> 00:01:22,520
And as a result,
its buffer gets filled up.

26
00:01:22,520 --> 00:01:25,870
And when that happens,
no further connections can be serviced.

27
00:01:25,870 --> 00:01:28,760
In other words,
the denial of service is accomplished.

28
00:01:28,760 --> 00:01:30,820
Here's a real example of SYN flood.

29
00:01:30,820 --> 00:01:34,270
The Blaster worm in 2003
infected many machines.

30
00:01:34,270 --> 00:01:39,198
And these infected machines were
insructed to launch a denial of service

31
00:01:39,198 --> 00:01:41,469
attack at noon on August 16th.

32
00:01:41,469 --> 00:01:46,428
That is, these machines were instructed
to launch SYN flood on port 80

33
00:01:46,428 --> 00:01:49,450
on the target server windowsupdate.com.

34
00:01:49,450 --> 00:01:53,450
In particular,
50 SYN requests were sent every second.

35
00:01:53,450 --> 00:01:55,930
And each packet is 40 bytes.

36
00:01:55,930 --> 00:02:00,610
And the source IP address of these
request packets were randomly generated.

37
00:02:00,610 --> 00:02:01,480
As a result,

38
00:02:01,480 --> 00:02:05,800
the server windowsupdate.com
was rendered unavailable.

39
00:02:05,800 --> 00:02:10,755
As a response, Microsoft moved the
Windows update service to a new domain,

40
00:02:10,755 --> 00:02:14,280
windowsupdate.microsoft.com.

41
00:02:14,280 --> 00:02:17,650
So how do we defend
against SYN flood attacks?

42
00:02:17,650 --> 00:02:23,380
How about increase the memory size or
decrease the timeout value so that

43
00:02:23,380 --> 00:02:27,680
when a server does not receive an ACK
packet, it just clears out the memory.

44
00:02:27,680 --> 00:02:32,590
These are not good solutions, because an
attacker can just send more packets or

45
00:02:32,590 --> 00:02:33,650
at a faster pace.

46
00:02:33,650 --> 00:02:38,659
A better solution is to remove
the need for a server to keep state.

47
00:02:38,659 --> 00:02:40,560
And this, of course, comes with a cost.

