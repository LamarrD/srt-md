1
00:00:00,220 --> 00:00:04,650
A major threat in web session
management, is session hijacking.

2
00:00:04,650 --> 00:00:08,109
Here, the attacker waits for
user to log in, and

3
00:00:08,109 --> 00:00:13,940
then the attacker can steal the user
session token and hijacks the session.

4
00:00:13,940 --> 00:00:18,605
And session hijacking is not limited to
active network attacker that intercept

5
00:00:18,605 --> 00:00:19,140
traffic.

6
00:00:19,140 --> 00:00:22,110
For example,
if counter is used a session token,

7
00:00:22,110 --> 00:00:25,870
then when a user logs in a website it
can get a counter value, then he can

8
00:00:25,870 --> 00:00:30,710
view sessions of other users because
he would know other counter values.

9
00:00:30,710 --> 00:00:34,800
Similarly, even if the token is
protected using cryptography,

10
00:00:34,800 --> 00:00:40,400
if the cryptographic algorithm or the
key is weak then a user can still break

11
00:00:40,400 --> 00:00:45,020
the protection, get the counter value,
and then view sessions of other users.

12
00:00:45,020 --> 00:00:50,010
So the point here is that we should use
tokens that are not predictable, and

13
00:00:50,010 --> 00:00:54,690
there are APIs that allow us to
generate random session IDs.

14
00:00:54,690 --> 00:00:58,520
Again, to make session tokens
unpredictable to attacker,

15
00:00:58,520 --> 00:01:00,520
we can use the underlying framework.

16
00:01:00,520 --> 00:01:02,610
For example, rails.

17
00:01:02,610 --> 00:01:07,770
For example, by combining the current
time stamp and random nouns and compute

18
00:01:07,770 --> 00:01:13,530
this values over MD5, that should
give you a very unpredictable token.

19
00:01:13,530 --> 00:01:15,870
Even when a session token is random,

20
00:01:15,870 --> 00:01:19,660
there's still a security
threat of session token theft.

21
00:01:19,660 --> 00:01:25,390
For example, if a web site uses HTTPS
for log in, but subsequently use

22
00:01:25,390 --> 00:01:30,440
HTTP for the rest of the session, then
an active network attacker, for example,

23
00:01:30,440 --> 00:01:35,670
can sit at a wireless cafe and
use a tool, for example, Firesheep

24
00:01:35,670 --> 00:01:41,040
to intercept the clear text HTTP
traffic and steal the session token.

25
00:01:41,040 --> 00:01:44,340
Another way for
the attacker to steal the session token

26
00:01:44,340 --> 00:01:49,140
is to play man in the middle at
the beginning of the SSL connection.

27
00:01:49,140 --> 00:01:53,800
Another approach to steel session token
is to use Cross Site Scripting attacks,

28
00:01:53,800 --> 00:01:57,390
and if the server does not
invalidate a session token

29
00:01:57,390 --> 00:02:00,470
after the user has logged out,
then the stolen token

30
00:02:00,470 --> 00:02:04,590
can still be used by the attacker
even after the user has logged out.

31
00:02:04,590 --> 00:02:08,479
One idea to mitigate session
hijacking is to bind a session token

32
00:02:08,479 --> 00:02:10,030
to the user's computer.

33
00:02:10,030 --> 00:02:14,870
For example, we can embed some machine
specific data in the session ID.

34
00:02:14,870 --> 00:02:18,150
So what machine specific
data of a user can be used?

35
00:02:18,150 --> 00:02:22,300
We begin by binding the session
token to the user's computer.

36
00:02:22,300 --> 00:02:26,670
Now we must decide specifically
what information we should use

37
00:02:26,670 --> 00:02:27,860
as the session token.

38
00:02:27,860 --> 00:02:31,700
We want it to be unguessable and
unique to the machine, but

39
00:02:31,700 --> 00:02:33,150
still quick to generate.

40
00:02:33,150 --> 00:02:36,200
So is using the IP address a good idea?

41
00:02:36,200 --> 00:02:42,000
Probably not and the reason is that the
user's computer changes its IP address.

42
00:02:42,000 --> 00:02:47,320
For example, due to DHCP, then the user
will be locked out of his own session.

43
00:02:47,320 --> 00:02:51,160
What if we used the browser
user information

44
00:02:51,160 --> 00:02:53,980
instead of the IP address
as a session token?

45
00:02:53,980 --> 00:02:58,920
The problem with this approach is that
such information is easily stolen or

46
00:02:58,920 --> 00:03:00,570
guessable by the attacker.

47
00:03:00,570 --> 00:03:02,250
So the conclusion is that,

48
00:03:02,250 --> 00:03:06,590
while it is appealing to use kind
site information a session token,

49
00:03:06,590 --> 00:03:11,410
there's not a good solution when we
consider both security and convenience.

50
00:03:11,410 --> 00:03:14,190
Therefore, the best approach is still

51
00:03:14,190 --> 00:03:17,260
an unpredictable session
token generated by the sever.
